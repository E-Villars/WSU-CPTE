#include "myfunctions.h"
uint32_t * interruptProcessorTargets= (uint32_t*)0xF8F01800;
uint32_t * interruptPriorityMask =  (uint32_t*)0xF8F00104;
uint32_t * cpuInterfaceControl = (uint32_t*)0xF8F00100;
uint32_t * distributorControlReg = (uint32_t*)0xF8F01000;
uint32_t * interruptSetEnable =  (uint32_t*)0xF8F01100;
uint32_t * interruptClearEnable =  (uint32_t*) 0xF8F01180;
uint32_t * interruptPriorityReg = (uint32_t*) 0xF8F01400;
uint32_t * interruptConfigReg = (uint32_t*) 0xF8F01C00;

uint32_t * GPIOInterruptDisableBank0 = (uint32_t *) 0xE000A214 ;
uint32_t * GPIOInterruptEnableBank1 = (uint32_t *) 0xE000A250;
uint32_t * GPIOInterruptDisableBank1 = (uint32_t *) 0xE000A254;
uint32_t * GPIOInterruptStatusBank1 = (uint32_t *) 0xE000A258;
uint32_t * GPIOInterruptTypeBank1 = (uint32_t *) 0xE000A25C;
uint32_t * GPIOInterruptPolarityBank1 = (uint32_t *) 0xE000A260;
uint32_t * GPIOInterruptAnyBank1 = (uint32_t *) 0xE000A264;

uint32_t * interruptAcknowledgeReg = (uint32_t *)0xF8F0010C;
uint32_t * endofInterruptReg = (uint32_t *) 0xF8F00110;
uint32_t * GPIOMaskData0 = (uint32_t *) 0xE000A004;

uint32_t * BTN_Address = (uint32_t *)0x4BB02004;

uint32_t * PIN_16 = (uint32_t *)0xF8000740;
uint32_t * PIN_17 = (uint32_t *)0xF8000744;
uint32_t * PIN_18 = (uint32_t *)0xF8000748;
uint32_t * PIN_50 = (uint32_t *)0xF80007C8; //BTN_4
uint32_t * PIN_51 = (uint32_t *)0xF80007CC; //BTN_5
uint32_t * GPIODirectionModeB0 = (uint32_t *)0xE000A204;
uint32_t * GPIOOutputEnableB0 = (uint32_t *)0xE000A208;
uint32_t * GPIODirectionModeB1 = (uint32_t *)0xE000A244;

uint32_t * GT_COUNTER0 = (uint32_t *)0xF8F00200;
uint32_t * GT_COUNTER1 = (uint32_t *)0xF8F00204;
uint32_t * GT_CONTROL = (uint32_t *)0xF8F00208;
uint32_t * GT_INTSTAT = (uint32_t *)0xF8F0020C;
uint32_t * GT_COMP0 = (uint32_t *)0xF8F00210;
uint32_t * GT_COMP1 = (uint32_t *)0xF8F00214;
uint32_t * GT_AUTOINC = (uint32_t *)0xF8F00218;

uint32_t * GTC = (uint32_t *)0xF8F00200;

uint32_t * SVD = (uint32_t *)0x4BB03000;

#define ICCPMR_BASEADDR 0xF8F00104
// Interrupt Priority Mask Register
#define ICCICR_BASEADDR 0xF8F00100
// CPU Interface Control Register
#define ICDDCR_BASEADDR 0xF8F01000
// Distributor Control Register
#define ICDISER_BASEADDR 0xF8F01100
// Interrupt Set Enable Register
#define ICDICER_BASEADDR 0xF8F01180
// Interrupt Clear/Enable Register
#define ICDIPR_BASEADDR 0xF8F01400
// Interrupt Priority Register Base address
#define ICDIPTR_BASEADDR 0xF8F01800
// Interrupt Processor Targets Register
#define ICDICFR_BASEADDR 0xF8F01C00
// Interrupt Configuration Register
 uint32_t D1= 0;
 uint32_t D2 = 0;
 uint32_t D3 = 0;
 uint32_t D4 = 0;
void activateLEDS()
{
	uint32_t* ledBaseAddress = (uint32_t*)0x4BB00000;
	ledBaseAddress[0] = 0x00000000; //enable the LEDs
	ledBaseAddress[1] = 0x00000000; //Turn on the LEDs
	while((BTN_Address[0] & (uint32_t)1) != 1)
	{
		//wait until button is pushed.
	}
	ledBaseAddress[0] = 0x0000000F; //enable the LEDs
	ledBaseAddress[1] = 0x0000000F; //Turn on the LEDs

}

void disableInterrupts()
{
	uint32_t bitsToEnable = 0xDF; // 1101_1111
	uint32_t readCPSR = 0;
	uint32_t clearByte = 0xFF;

	__asm__ __volatile__("MRS %0,CPSR\n" : "=r" (readCPSR));
	__asm__ __volatile__("MSR CPSR, %0\n" :: "r"((readCPSR & (~clearByte))|bitsToEnable));
}
void enableInterrupts()
{
	uint32_t bitsToEnable = 0x5F; // 1101_1111
	uint32_t readCPSR = 0;
	uint32_t clearByte = 0xFF;

	__asm__ __volatile__("MRS %0,CPSR\n" : "=r" (readCPSR));
	__asm__ __volatile__("MSR CPSR, %0\n" :: "r"((readCPSR & (~clearByte))|bitsToEnable));
}
void GICConfigure()
{

	interruptProcessorTargets[13] = 0x00000000; //Resets processor target
	interruptClearEnable[1] = 0x00100000; //enables interrupt forwarding to CPU interface.
	distributorControlReg[0] = 0x0; //Enable secure interrupt control
	interruptPriorityReg[13] = 0x000000A0; //Set priority level of interrupt 52
	interruptProcessorTargets[13] = 0x00000001; //CPU 0 will handle the interrupt.
	interruptConfigReg[3] =  0x00000100;
	interruptSetEnable[1] =  0x00100000;
	interruptPriorityMask[0] = 0xFF;
	cpuInterfaceControl[0] = 0x3;
	distributorControlReg[0] = 0x1;

}

void initalizeGPIOInterrupts()
{


	GPIOInterruptDisableBank0[0] = 0xFFFFFFFF; //reset
	GPIOInterruptDisableBank1[0] = 0xFFFFFFFF;
	GPIOInterruptStatusBank1[0] = 0xFFFFFFFF;
	GPIOInterruptTypeBank1[0] =  0x0C0000; //set interrupt type
	GPIOInterruptPolarityBank1[0] =  0x0C0000; //set positive event
	GPIOInterruptAnyBank1[0] =  0x000000; //no override
	GPIOInterruptEnableBank1[0] = 0x0C0000;
	//
	*((uint32_t*) ICDIPTR_BASEADDR+0x7) = 0x00000000; // remove processors
	*((uint32_t*) ICDICER_BASEADDR) = 0x08000000; // clear interrupt ID 27
	*((uint32_t*) ICDDCR_BASEADDR) = 0x0;
	// enable secured mode interrupt
	*((uint32_t*) ICDIPR_BASEADDR+0x7) = 0x90000000; // Set priority to 9 for ID 27
	*((uint32_t*) ICDIPTR_BASEADDR+0x7) = 0x01000000; // Enable interrupt #27 for CPU0
	*((uint32_t*) ICDICFR_BASEADDR+0x1) = 0x7DC00000; // ID 27 = edge sensitive only
	*((uint32_t*) ICDISER_BASEADDR) = 0x08000000; // Enable ID 27
	*((uint32_t*) ICCPMR_BASEADDR) = 0xFF; // interrupt priority mask
	*((uint32_t*) ICCICR_BASEADDR) = 0x3;
	// interrupt control interface
	*((uint32_t*) ICDDCR_BASEADDR) = 0x1;
	// enable secured mode.


}

void IRQHandler(void * data)
{
	uint32_t * interruptAcknowledgeReg = (uint32_t *)0xF8F0010C;
	uint32_t * endofInterruptReg = (uint32_t *) 0xF8F00110;
	//uint32_t * GPIOMaskData0 = (uint32_t *) 0xE000A004;


	uint32_t interruptID = interruptAcknowledgeReg[0]; //Get interrupt ID


	if(interruptID == 52)
	{

		 //check if button event occurs.
		GPIOIRQ();
	}
	else if(interruptID == 27)
	{
		GTIRQ();
	}

	endofInterruptReg[0] = interruptID; //clear interrupt.

}
void configureIO()
{
	*((uint32_t*) 0xF8000000+0x8/4) = 0x0000DF0D;//???

PIN_16[0]=0x00001600;//SET IO Type and enable pullup pin
PIN_17[0]=0x00001600;
PIN_18[0]=0x00001600;
PIN_50[0]=0x00000600;//SET IO Type to LVCMOS33
PIN_51[0]=0x00000600;
GPIODirectionModeB0[0] = 0x00070000;
GPIOOutputEnableB0[0] = 0x00070000;
GPIODirectionModeB1[0] = 0x00000000;

}

void InitSVD()
{
	SVD[0] = 0x00;
	SVD[0] = 0x01;
	SVD[4] = 0;
	SVD[3] = 0;
	SVD[2] = 0;
	SVD[1] = 0;
}

void InitGT()
{


	GTC[2] = 0x0000;//Timer off and disable interrupts

	GTC[0] = 0x00000000;
	GTC[1] = 0x00000000; //Clear Counter

	GTC[3] =  0x00000001;
	GTC[4] =  3333333; // set the comparator to 1 second under prescale of 1.
	GTC[5] = 0x00000000;

	GTC[2] = 0x0100;//Prescale 1
}
void ConfigGT()
{
	//could be problematic
		interruptProcessorTargets[7] = 0x00000000; //Resets processor target
		interruptClearEnable[0] = 0x08000000; //enables interrupt forwarding to CPU interface.
		distributorControlReg[0] = 0x0; //Enable secure interrupt control
		interruptPriorityReg[7] = 0x90000000; //Set priority level of interrupt 27(1 byte too far)
		interruptProcessorTargets[7] = 0x01000000; //CPU 0 will handle the interrupt.
		interruptConfigReg[1] =  0x7DC00000;
		interruptSetEnable[0] =  0x08000000; //check
		interruptPriorityMask[0] = 0xFF;
		cpuInterfaceControl[0] = 0x3;
		distributorControlReg[0] = 0x1;
}

void GTIRQ()
{

	if(D4 == 0x9)
	{
		D4 = 0x0;
		SVD[4] = D4;
		if(D3 == 0x9)
		{
			D3 = 0x0;
			SVD[3] = D3;
			if(D2 == 0x9)
			{
				D2 = 0x0;
				SVD[2] = D2;
				if(D1 == 0x9)
				{
					D1 = 0x0;
					SVD[1] = 0x0;
				}
				else
				{
					D1 = D1 + 1;
				}
			}
			else
			{
				D2 = D2 + 1;
			}
		}
		else
		{
			D3 = D3 + 1;
		}
	}
	else
	{
		D4 = D4 + 1;
	}
		SVD[4] = D4;
		SVD[3] = D3;
		SVD[2] = D2;
		SVD[1] = D1;

		GTC[0] = 0x00000000;
		GTC[1] = 0x00000000; //Clear Counter
		GTC[2] = 0x010F;//Prescale 1
		GTC[3] =  0x1;

		*((uint32_t*) GT_COUNTER0_ADDRESS) = 0x00000000;  // Reset the timer
		*((uint32_t*) GT_COUNTER1_ADDRESS) = 0x00000000;
		*((uint32_t*) GT_CONTROL_ADDRESS) = 0x010F;            // Restart the timer
		*((uint32_t*) GT_INTSTAT_ADDRESS) = 0x1;      // Clear the Timer interrupt Flag

}
void GPIOIRQ()
{

	uint32_t GPIO_Interrupt = GPIOInterruptStatusBank1[0]; //check if interrupt happened
	uint32_t buttonEvent = 0xC0000 & GPIO_Interrupt;
	if(buttonEvent == 0x80000)
	{
		GTC[0] = 0x00000000;
		GTC[1] = 0x00000000; //Clear Counter
		SVD[4] = 0x00000000;
		SVD[3] = 0x00000000;
		SVD[2] = 0x00000000;
		SVD[1] = 0x00000001;

	}
	else if(buttonEvent == 0x40000)
	{
		GTC[2] = 0xF;
	}
	GPIOInterruptStatusBank1[0] =  0xFFFFFF;

}
void GTINT()
{
	GTC[3] =  0x1;
}
