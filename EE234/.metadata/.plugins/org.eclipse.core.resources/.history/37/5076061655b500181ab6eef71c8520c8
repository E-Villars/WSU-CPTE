/*
 * P2.S
 *
 *  Created on: Sep 1, 2018
 *      Author: Elliott Villars
 */

/*.text
.global main

.set LED_ADDR,0x4BB00000
.set STACK_TOP,0x1F000000 //arbitrary stack location
.set RGB_ADDR, 0x4BB01000

main:
LDR r13,=STACK_TOP
LDR r0,=LED_ADDR
LDR r12, =RGB_ADDR
bl init_PWM
bl init_PWM_PERIOD
MOV r2, #1000 		@ r2 holds max pulse width
MOV r1, #0			@ r1 holds current pulse width
MOVw r4, #0xFFFF		@ r3 holds loop delay count
MOVt r4, #0x000F

   /*Create an always loop to ramp up LED0-3


led_loop:
bl set_DC		@ Pass r1 to set pulse width
bl set_delay		@ Pass r4 to delay loop
ADDS r1, r1, #1	 	@ inc r1
CMP r1, r2
BNE led_loop 		@ restart loop when r1==r2
MOV r1, #0			@ reset r1 to 0 and restart loop
b led_loop


init_PWM:
MOV r1, #0x1F
STR r1, [r12] //enable rgb
MOV r1,#0x0
STR r1, [r0] //Reset LEDs
MOV r1, #0x1F
STR r1, [r0] //enable PWM and leds
MOV r1, #0xC
STR r1, [r0,#0x08] //set clock division value
bx lr

init_PWM_PERIOD:
MOV r1, #1000
STR r1,[r0,#0x1C] // define period value as 1000 for led 0
MOV r1, #0
STR r1,[r0,#0x0C] //set duty cyle as 0 for now
MOV r1, #1000
STR r1,[r0,#0x20] // define period value as 1000 for led 1
MOV r1, #0
STR r1,[r0,#0x10] //set duty cyle as 0 for now
MOV r1, #1000
STR r1,[r0,#0x24] // define period value as 1000 for led 2
MOV r1, #0
STR r1,[r0,#0x14] //set duty cyle as 0 for now
MOV r1, #1000
STR r1,[r0,#0x28] // define period value as 1000 for led 3
MOV r1, #0
STR r1,[r0,#0x18] //set duty cyle as 0 for now
bx lr

set_DC:
STR r1, [r0,#0x0C]
STR r1, [r0,#0x10]
STR r1, [r0,#0x14]
STR r1, [r0,#0x18]
bx lr

set_delay: //delay before duty cycle state change
STMDB r13!, {r1,r4} //writes to stack. decrements by 4 bytes then pushes.
subloop:
SUBS r4, r4, #1	@ decrement r4 until r4 ==0
BNE subloop
LDMIA r13!, {r1,r4} //restores from stack. pops then increments.
bx lr
*/
