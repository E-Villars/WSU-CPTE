/*
 * myfunctions.c
 *
 *  Created on: Oct 13, 2018
 *      Author: Sergaljerk
 */

#include "myfunctions.h"

void activateLEDS()
{
	uint32_t* ledBaseAddress = (uint32_t*)0x4BB00000;

	ledBaseAddress[0] = 0x0000000F; //enable the LEDs
	ledBaseAddress[1] = 0x0000000F; //Turn on the LEDs
}

void disableInterrupts()
{
	uint32_t bitsToEnable = 0xDF; // 1101_1111
	uint32_t readCPSR = 0;
	uint32_t clearByte = 0xFF;

	__asm__ __volatile__("MRS %0,CPSR\n" : "=r" (readCPSR));
	__asm__ __volatile__("MSR CPSR, %0\n" :: "r"((readCPSR & (~clearByte))|bitsToEnable));
}

void GICConfigure()
{
	uint32_t * interruptProcessorTargets= (uint32_t*)0xF8F01800;
	uint32_t * interruptPriorityMask =  (uint32_t*)0xF8F00104;
	uint32_t * cpuInterfaceControl = (uint32_t*)0xF8F00100;
	uint32_t * distributorControlReg = (uint32_t*)0xF8F01000;
	uint32_t * interruptSetEnable =  (uint32_t*)0xF8F01100;
	uint32_t * interruptClearEnable =  (uint32_t*) 0xF8F01180;
	uint32_t * interruptPriorityReg = (uint32_t*) 0xF8F01400;
	uint32_t * interruptConfigReg = (uint32_t*) 0xF8F01C00;

	interruptProcessorTargets[13] = 0x00000000;
	interruptClearEnable[1] = 0x00100000;
	distributorControlReg[0] = 0x0;
	interruptPriorityReg[13] = 0x000000A0;
	interruptProcessorTargets[13] = 0x00000001;
	interruptConfigReg[3] =  0x00000100;
	interruptSetEnable[1] =  0x00100000;
	interruptPriorityMask[0] = 0xFF;
	cpuInterfaceControl[0] = 0x3;
	distributorControlReg[0] = 0x1;

}
