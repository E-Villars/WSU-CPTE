/*
 * myfunctions.c
 *
 *  Created on: Oct 13, 2018
 *      Author: Sergaljerk
 */

#include "myfunctions.h"
uint32_t * interruptProcessorTargets= (uint32_t*)0xF8F01800;
uint32_t * interruptPriorityMask =  (uint32_t*)0xF8F00104;
uint32_t * cpuInterfaceControl = (uint32_t*)0xF8F00100;
uint32_t * distributorControlReg = (uint32_t*)0xF8F01000;
uint32_t * interruptSetEnable =  (uint32_t*)0xF8F01100;
uint32_t * interruptClearEnable =  (uint32_t*) 0xF8F01180;
uint32_t * interruptPriorityReg = (uint32_t*) 0xF8F01400;
uint32_t * interruptConfigReg = (uint32_t*) 0xF8F01C00;

uint32_t * GPIOInterruptDisableBank0 = (uint32_t *) 0xE000A214 ;
uint32_t * GPIOInterruptEnableBank1 = (uint32_t *) 0xE000A250;
uint32_t * GPIOInterruptDisableBank1 = (uint32_t *) 0xE000A254;
uint32_t * GPIOInterruptStatusBank1 = (uint32_t *) 0xE000A258;
uint32_t * GPIOInterruptTypeBank1 = (uint32_t *) 0xE000A25C;
uint32_t * GPIOInterruptPolarityBank1 = (uint32_t *) 0xE000A260;
uint32_t * GPIOInterruptAnyBank1 = (uint32_t *) 0xE000A264;

uint32_t * interruptAcknowledgeReg = (uint32_t *)0xF8F0010C;
uint32_t * endofInterruptReg = (uint32_t *) 0xF8F00110;
uint32_t * GPIOMaskData0 = (uint32_t *) 0xE000A004;
void activateLEDS()
{
	uint32_t* ledBaseAddress = (uint32_t*)0x4BB00000;

	ledBaseAddress[0] = 0x0000000F; //enable the LEDs
	ledBaseAddress[1] = 0x0000000F; //Turn on the LEDs
}

void disableInterrupts()
{
	uint32_t bitsToEnable = 0xDF; // 1101_1111
	uint32_t readCPSR = 0;
	uint32_t clearByte = 0xFF;

	__asm__ __volatile__("MRS %0,CPSR\n" : "=r" (readCPSR));
	__asm__ __volatile__("MSR CPSR, %0\n" :: "r"((readCPSR & (~clearByte))|bitsToEnable));
}
void enableInterrupts()
{
	uint32_t bitsToEnable = 0x5F; // 1101_1111
	uint32_t readCPSR = 0;
	uint32_t clearByte = 0xFF;

	__asm__ __volatile__("MRS %0,CPSR\n" : "=r" (readCPSR));
	__asm__ __volatile__("MSR CPSR, %0\n" :: "r"((readCPSR & (~clearByte))|bitsToEnable));
}
void GICConfigure()
{

	interruptProcessorTargets[13] = 0x00000000;
	interruptClearEnable[1] = 0x00100000;
	distributorControlReg[0] = 0x0;
	interruptPriorityReg[13] = 0x000000A0;
	interruptProcessorTargets[13] = 0x00000001;
	interruptConfigReg[3] =  0x00000100;
	interruptSetEnable[1] =  0x00100000;
	interruptPriorityMask[0] = 0xFF;
	cpuInterfaceControl[0] = 0x3;
	distributorControlReg[0] = 0x1;

}

void initalizeGPIOInterrupts()
{


	GPIOInterruptDisableBank0[0] = 0xFFFFFFFF;
	GPIOInterruptDisableBank1[0] = 0xFFFFFFFF;
	GPIOInterruptStatusBank1[0] = 0xFFFFFFFF;
	GPIOInterruptTypeBank1[0] =  0x0C0000;
	GPIOInterruptPolarityBank1[0] =  0x0C0000;
	GPIOInterruptAnyBank1[0] =  0x000000;
	GPIOInterruptEnableBank1[0] = 0x0C0000;
}

void IRQHandler(void * data)
{
	uint32_t * interruptAcknowledgeReg = (uint32_t *)0xF8F0010C;
	uint32_t * endofInterruptReg = (uint32_t *) 0xF8F00110;
	uint32_t * GPIOMaskData0 = (uint32_t *) 0xE000A004;

	uint32_t GPIO_Interrupt = GPIOInterruptStatusBank1[0];
	uint32_t interruptID = interruptAcknowledgeReg[0];
	uint32_t buttonEvent = 0xC0000 & GPIO_Interrupt;
	if(interruptID == 52)
	{
		if(buttonEvent ==  0x80000 )
		{
			GPIOMaskData0[0] = 0xFFF80001;
		}
		if(buttonEvent ==  0x40000 )
		{
			GPIOMaskData0[0] = 0xFFF80002;
		}
	}
	GPIOInterruptStatusBank1[0] = 0xFFFFFF;
	endofInterruptReg[0] = interruptID;
}
void configureIO()
{
	*((uint32_t*) 0xF8000000+0x8/4) = 0x0000DF0D;//???

	//*((uint32_t*) MIO_PIN_50) = 0x00000600; // BTN4
	//*((uint32_t*) MIO_PIN_51) = 0x00000600; // BTN5


}
